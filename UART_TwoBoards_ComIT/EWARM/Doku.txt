Wichtig nach ToDo suchen
Compiler Optimierung einschalten und prüfen ob noch alles geht

Strg+D kompilieren und downloaden

BSP Board Support Package

MSP = MCU Specific Package 
Source: Acronyms and definitions of "UM1725 User Manual Description of STM32F4xx HAL drivers"
(http://www.st.com/content/ccc/resource/technical/document/user_manual/2f/71/ba/b8/75/54/47/cf/DM00105879.pdf/files/DM00105879.pdf/jcr:content/translations/en.DM00105879.pdf)

Wichtig beidem Des-Eval Board war BOOT0-Pin floating dies hat Probleme beim Debuggen verursacht.
Er muss auf Low sein, damit vom Main Flash gebootet wird.
Als er noch floated war, war der Program Counter manchmal im Bereich vom System Memory (0x1FFFEC00 - 0x1FFFF7FF).
Hier befindet sich der interne Bootloader des ST, dies darf während der Programmausführung jedoch nicht sein.

In der Datei stm32f0xx_hal_uart.c wird folgendes gemacht:
/* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
    
disegna hose kurz kariert




Ganzer Pfad in output-file (bei mir wenn ich read back mit ST Visual Programmer gemacht hab).
Lösung:
Quelle: https://www.iar.com/support/tech-notes/general/avoiding-full-paths-in-the-output-file/
Add to Project->Options->C/C++ Compiler ->Extra Options
--no_path_in_file_macros

Falls diese Anwendung mit Bootloader laufen soll muss in Ordner CMSIS die Datei system_stm32f10x.c
in der Zeile #define VECT_TAB_OFFSET  0x0 angepasst werden.
Ebenso muss das Linker-File angepasst werden Project->Options Linker Button:Edit

stm32f0xx_Des_Eval.h
  Defines für Analogschalter eingefügt
  Defines für User Button angepasst
stm32f0xx_Des_Eval.c
  Funktionen für Analogschlater eingefügt
  Funktionen für NTC eingefügt
  
Allgemein:
Der User-Button löst einen EXTI Interrupt aus.
Es wird void EXTI4_15_IRQHandler(void) in stm32f0xx_it.c aufgerufen.
Dort wird die Fkt HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN) in stm32f0xx_hal_gpio.c ufgerufen.

Beim Empfang an DEBUGUsart wird ein Interrupt ausgelöst.

  
  
Vorbereitet ist:
I2C1
GPIO_PIN_SCL                       GPIO_Pin_6
GPIO_PIN_SDA                       GPIO_Pin_7
GPIOB
->SCL PB6/D5(CON3)
->SDA PB7/D9(CON4)

USART1
#define GPIO_USART1_TXD_PIN               GPIO_Pin_9
#define GPIO_USART1_RXD_PIN               GPIO_Pin_10
GPIOA
->TxD PA9/D7(CON3),Pin3(UEXT)
->RxD PA10/D8(CON4),Pin4(UEXT)
->GND Pin2(UEXT)
115200 8N1

BUTTON
#define GPIO_KEY_BUTTON                   GPIOB
#define RCC_APB2Periph_GPIO_KEY_BUTTON    RCC_APB2Periph_GPIOB
#define GPIO_PIN_KEY_BUTTON               GPIO_Pin_5
GPIO_KEY_BUTTON
->PB5/D4(CON3)

LED
#define GPIO_LED                          GPIOA
#define RCC_APB2Periph_GPIO_LED           RCC_APB2Periph_GPIOA
#define GPIO_PIN_LED                      GPIO_Pin_1
->PA1/D3(CON3),LED2-yellow

TIMER2

03.07.2017:
Kopie von AN4657-STM32Cube_IAP_using_UART\Projects\STM3210C_EVAL angelegt und in OLIMEXINO umbenannt 

STM32F103RB hat 128kB Flash
Hat 128 Pages mit 1024B (Page0 bis Page127)
Siehe File stm32f1xx_hal_flash_ex.h -> #define FLASH_PAGE_SIZE          ((uint32_t)0x400)
0x400 -> 1024

ursprünglicher Controller STM32F107xC hat 256kB Flash
Hat 128 Pages mit 2048B (Page0 bis Page 127)
Siehe File stm32f1xx_hal_flash_ex.h -> #define FLASH_PAGE_SIZE          ((uint32_t)0x800)
0x800 -> 2048

In File flash_if.h
#define APPLICATION_ADDRESS     (uint32_t)0x08004000      /* Start user code address: ADDR_FLASH_PAGE_8 */

/* Notable Flash addresses */
#define USER_FLASH_END_ADDRESS        0x08040000

/* Define the user application size */
#define USER_FLASH_SIZE               ((uint32_t)0x00003000) /* Small default template application */

Bootloader ist von 0x80000000 bis 0x80003FFF -> größe ist 0x4000->16384B ->16kB
Für STM32F107xC heisst das der Bootloader ist 16384B/2048B=8 -> derBootloader belegt 8 Pages(0 bis 7) -> deshalb wurde in file flash_if.h ab Page 8 write protection definiert
Die App ist laut flash_if.h 0x3000-> 12288B groß 12288B/2048B=6 eswerden aber Page 8 bis 39 als protected definiert
Für STM32F103RB heisst das der Bootloader ist 16384B/1024B=16 -> derBootloader belegt 16 Pages(0 bis 15)

SystemInit wir in startup_stm32f103xb.s aufgerufen
